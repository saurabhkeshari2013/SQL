create database casestudy1;
use casestudy1;

select * from fact;
select * from Location;
select * from Product;

--1. Display the number of states present in the Location Table.
select count(distinct State) as count_state from Location;

--2. How many products are of regular type?
select count(*) as num_product  from product where type='regular';


--3. How much spending has been done on marketing of product ID 1?
select sum(marketing) as sum_marketing from fact where ProductId = 1;

--4. What is the minimum sales of a product?
select min(sales) as minimum_sales from fact;

--5. Display the max Cost of Good Sold (COGS).
select max(COGS) as maximum_COGS from fact;

--6. Display the details of the product where product type is coffee.
select * from product where product_type='coffee';

--7. Display the details where total expenses are greater than 40.
select * from fact where  Total_Expenses>40;

--8. What is the average sales in area code 719?
select avg(sales) as avg_sales from fact where area_code=719;

--9. Find out the total profit generated by Colorado state.
select sum(profit) as total_profit from fact f 
join location l on f.area_code = l.area_code
where state='Colorado';

--10. Display the average inventory for each product ID.
select avg(inventory)as avg_inventory,ProductId  from fact group by ProductId;

--11. Display state in a sequential order in a Location Table.
select state from location order by state;

--12. Display the average budget of the Product where the average budget margin 
     --should be greater than 100.
select avg(budget_margin) as average_budget, ProductId from fact 
group by ProductId having avg(budget_margin)>100;

--13. What is the total sales done on date 2010-01-01?
select sum(sales) as total_sales from fact where date='2010-01-01' ;

--14. Display the average total expense of each product ID on an individual date.
select avg(total_expenses) as avg_total_expensese,date, productid from fact  
group by date,productid order by date, productid;

--15. Display the table with the following attributes such as date, productID,
    --product_type, product, sales, profit, state, area_code.
select date, p.productid,product_type, product, sales, profit, state, f.area_code 
from fact f join product p on f.productid=p.productid join location l
on l.area_code=f.area_code ;

--16. Display the rank without any gap to show the sales wise rank.
select sales, dense_rank() over (order by sales) as rank_sales  from fact;

--17. Find the state wise profit and sales.
select  state, sum(profit) as sum_profit, sum(sales) as sum_sales from fact f  
join location l  on l.area_code=f.area_code group by state;


--18. Find the state wise profit and sales along with the product name.
select  state,product, sum(profit) as sum_profit, sum(sales) as sum_sales 
from fact f join product p on f.productid=p.productid join location l
on l.area_code=f.area_code group by state, product order by state, product;


--19. If there is an increase in sales of 5%, calculate the increased sales.
select sales, sales+0.05*sales as increased_sales from fact;

--20. Find the maximum profit along with the product ID and product type.
select max(profit) as max_profit, f.productid, product_type from fact f
join product p on f.productid=p.productid group by f.productid,product_type 
order by f.productid,product_type;

--or

select profit, f.productid, product_type from fact f
join product p on f.productid=p.productid where profit=(select max(profit) from fact);


--21. Create a stored procedure to fetch the result according to the product type
   --from Product Table.
create  procedure  p_type  @prod_type varchar(20)
as
select * from product where product_type=@prod_type;
go

exec p_type  @prod_type='tea';

--22. Write a query by creating a condition in which if the total expenses is less 
     --than 60 then it is a profit or else loss.
select productid,total_expenses, iif (total_expenses<60, 'Profit','Loss') as 'profit/loss'
from fact;

--23. Give the total weekly sales value with the date and product ID details. Use
     --roll-up to pull the data in hierarchical order.
select datepart(week,date) as week, productid, sum(sales) as total_weekly_sales from fact
group by rollup(datepart(week,date), productid);


--24. Apply union and intersection operator on the tables which consist of
    --attribute area code.
select area_code from fact 
union
select area_code from location;

select area_code from fact 
intersect
select area_code from location;

--25. Create a user-defined function for the product table to fetch a particular
   --product type based upon the user’s preference.
create function prod_type(@p_type varchar(20))
returns table
as
return (select * from product where product_type=@p_type);

select * from dbo.prod_type('coffee');

--26. Change the product type from coffee to tea where product ID is 1 and undo it.
begin transaction
update product set product_type='tea' where productid=1

rollback

select * from product


--27. Display the date, product ID and sales where total expenses are between 
    -- 100 to 200.
select date, productid, sales from fact where total_expenses  between 100 and 200;

--28. Delete the records in the Product Table for regular type.
delete from product where type='regular';

--29. Display the ASCII value of the fifth character from the column Product.
select product, ascii(substring(product,5,1)) as ascii_value from product;